{"version":3,"file":"test.js","sources":["../ecs.ts","../test.ts"],"sourcesContent":["// TODO creating a cached view when there are already entities in the registry should grab them\n\n/**\n * Entities are implemented as numbers (32 bit integers specifically), but\n * should be treated as opaque identifiers.\n */\nexport type Entity = number\n\nclass ComponentStore {\n  name: string // for debugging\n  entities: Array<Entity>;\n  indices: Array<number>;\n  components: Array<any>;\n  size: number;\n  oncreate?: (Entity, any) => void\n  ondestroy?: (Entity, any) => void\n\n  constructor(name: string) {\n    this.entities = []\n    this.indices = []\n    this.components = []\n    this.size = 0;\n    this.name = name;\n  }\n\n  clear() {\n    this.entities.length = 0\n    this.indices.length = 0\n    this.components.length = 0\n    this.size = 0\n  }\n\n  insert(entity: Entity, component: any) {\n    this.entities[this.size] = entity;\n    this.components[this.size] = component;\n    this.indices[entity] = this.size;\n    this.size++;\n    if (this.oncreate)\n      this.oncreate(component, entity)\n  }\n\n  replace(entity: Entity, component: any) {\n    this.components[this.indices[entity]] = component;\n  }\n\n  assign(entity: Entity, component: any) {\n    if (this.contains(entity))\n      this.replace(entity, component);\n    else\n      this.insert(entity, component);\n  }\n\n  remove(entity: Entity) {\n    if (!this.contains(entity))\n      return;\n    if (this.ondestroy)\n      this.ondestroy(this.components[this.indices[entity]], entity)\n    let lastComponent = this.components[this.size - 1];\n    let lastEntity = this.entities[this.size - 1];\n    this.components[this.indices[entity]] = lastComponent;\n    this.entities[this.indices[entity]] = lastEntity;\n    this.indices[lastEntity] = this.indices[entity];\n    this.size--;\n  }\n\n  get(entity: Entity) {\n    if (this.contains(entity))\n      return this.components[this.indices[entity]];\n  }\n\n  getComponents() {\n    return this.components.slice(0, this.size)\n  }\n\n  contains(entity: Entity) {\n    return this.indices[entity] < this.size && this.entities[this.indices[entity]] == entity;\n  }\n\n  eachEntity(f: (e: Entity) => any) {\n    for (var i = this.size - 1; i >= 0; i--) {\n      f(this.entities[i]);\n    }\n  }\n\n  eachComponent(f: (c: any) => any) {\n    for (var i = this.size - 1; i >= 0; i--) {\n      f(this.components[i]);\n    }\n  }\n\n  each(f: (c: any, e: Entity) => any) {\n    for (var i = this.size - 1; i >= 0; i--) {\n      f(this.components[i], this.entities[i]);\n    }\n  }\n}\n\nclass CachedView {\n  private componentStores: ComponentStore[] = [];\n  private packedComponents: ComponentStore = new ComponentStore(\"#packed \");\n\n  injest(componentStore: ComponentStore) {\n    let __this = this;\n    let oldClear = componentStore.clear.bind(componentStore);\n    componentStore.clear = function () {\n      oldClear();\n      __this.packedComponents.clear();\n    }\n\n    let oldRemove = componentStore.remove.bind(componentStore);\n    componentStore.remove = function (entity) {\n      oldRemove(entity);\n      __this.packedComponents.remove(entity);\n    }\n\n    let oldInsert = componentStore.insert.bind(componentStore);\n    function tryPackedInsert(entity:Entity) {\n      if(__this.packedComponents.contains(entity))\n        return;\n\n      // if entity has all the components then add it to packedComponents\n      for (let i = 0; i < __this.componentStores.length; i++) {\n        if (!__this.componentStores[i].contains(entity)) {\n          return;\n        }\n      }\n      \n      let packed = new Array(__this.componentStores.length);\n      for (let i = 0; i < __this.componentStores.length; i++) {\n        packed[i] = (__this.componentStores[i].get(entity))\n      }\n      __this.packedComponents.insert(entity, packed);\n    }\n    componentStore.insert = function (entity, component) {\n      oldInsert(entity, component);\n      tryPackedInsert(entity);\n    }\n\n    let oldReplace = componentStore.replace.bind(componentStore);\n    componentStore.replace = function (entity, component) {\n      oldReplace(entity, component);\n      // if entity has all the components then replace it in packedComponents\n      for (let i = 0; i < __this.componentStores.length; i++) {\n        if (!__this.componentStores[i].contains(entity)) {\n          return;\n        }\n      }\n      let idx = __this.componentStores.indexOf(componentStore);\n      let packed = __this.packedComponents.get(entity)\n      packed[idx] = component;\n    }\n\n    componentStore.eachEntity(tryPackedInsert)\n  }\n\n  constructor(componentStores: ComponentStore[]) {\n    this.componentStores = componentStores;\n    this.packedComponents.name += this.componentStores.map(cs => cs.name).join(\",\")\n    for (let i = 0; i < componentStores.length; i++) {\n      this.injest(componentStores[i])\n    }\n  }\n\n  eachEntity(f) { this.packedComponents.eachEntity(f); }\n  eachComponent(f) { this.packedComponents.eachComponent(f); }\n  each(f) { this.packedComponents.each(f); }\n  count() { return this.packedComponents.size }\n\n  set oncreate(f: (Entity, any) => void) { this.packedComponents.oncreate = f }\n  set ondestroy(f: (Entity, any) => void) { this.packedComponents.ondestroy = f }\n}\n\nclass View {\n  componentStores: Array<ComponentStore>;\n  constructor(componentStores) {\n    this.componentStores = componentStores;\n  }\n  each(f) {\n    if (this.componentStores.length == 0)\n      return;\n    if (this.componentStores.length == 1)\n      return this.componentStores[0].each(f);\n    let smallestSet = this.componentStores[0];\n    for (var i = this.componentStores.length - 1; i >= 0; i--)\n      if (this.componentStores[i].size < smallestSet.size)\n        smallestSet = this.componentStores[i];\n    var componentCount = this.componentStores.length;\n    var args = new Array(componentCount + 1);\n    for (var i = smallestSet.size - 1; i >= 0; i--) {\n      let e = smallestSet.entities[i];\n      args[0] = e;\n      var j = 0;\n      for (; j < componentCount; j++) {\n        if (!this.componentStores[j].contains(e))\n          break;\n        args[j + 1] = this.componentStores[j].get(e);\n      }\n      if (j < componentCount)\n        continue;\n      f.apply(null, args);\n    }\n  }\n}\n\nclass Registry {\n  entities: Array<Entity> = []\n  available: number = 0\n  next: number = 0\n\n  create() {\n    if (this.available > 0) {\n      let entity = this.next\n      this.next = this.entities[entity]\n      this.entities[entity] = entity\n      this.available--\n      return entity\n    } else {\n      let entity = this.entities.length\n      this.entities.push(entity)\n      return entity\n    }\n  }\n\n  destroy(entity: number) {\n    let node = (this.available > 0 ? this.next : -1)\n    this.entities[entity] = node\n    this.next = entity\n    this.available++\n  }\n\n  // TODO might be wrong\n  valid(entity: number) {\n    return entity < this.entities.length && this.entities[entity] === entity\n  }\n\n  get count(): number {\n    return this.entities.length - this.available;\n  }\n}\n\nexport class ECS {\n  private viewCache : Map<string, CachedView> = new Map()\n  registry: Registry = new Registry()\n  components: { [_:string]: ComponentStore } = {}\n  updateSystems: (()=>void)[] = []\n  // createSystems: { [name: string]: (e: Entity, component) => any } = {}\n  // destroySystems: { [name: string]: (e: Entity, component) => any } = {}\n\n  /**\n   * Destroys all entities\n   */\n  destroyAll() {\n    let entitySet = new Set<Entity>()\n    for (const name in this.components) {\n      let c = this.components[name]\n      c.eachEntity(e => entitySet.add(e))\n    }\n\n    entitySet.forEach(e => {\n      this.destroy(e)\n    })\n\n  }\n\n  /**\n   * Returns a [[ComponentStore]] for the component named `name`\n   * \n   * If a store for a component named `name` does not already exist one is\n   * created\n   * \n   * @param name The name of the component\n   */\n  component(name: string) {\n    if (this.components[name] === undefined) {\n      this.components[name] = new ComponentStore(name)\n    }\n    return this.components[name];\n  }\n\n  /**\n   * Returns the value of the component named `name` assigned to entity `e`\n   * @param e The entity\n   * @param name The name of the component\n   */\n  getComponent(e: Entity, name: string) {\n    return this.component(name).get(e)\n  }\n\n  /**\n   * Returns a JavaScript object of every component assigned to entity `e`\n   * \n   * @remarks This is not a fast operation. The object is not stored or used by\n   * the ECS -- it is computed every time this method is called.\n   * \n   * @param e The entity\n   */\n  getComponents(e: Entity) {\n    let val = {}\n    for (const name in this.components) {\n      if (this.components.hasOwnProperty(name)) {\n        const component = this.components[name];\n        if (component.contains(e))\n          val[name] = component.get(e)\n      }\n    }\n    return val\n  }\n\n  /**\n   * Assign the component value `cmpt` to entity `e` with the name `name` \n   * \n   * @todo this should fire create logic\n   * \n   * @param e The entity\n   * @param name The name of the component\n   * @param cmpt The value of the component\n   */\n  assign(e: Entity, name: string, cmpt: any) {\n    return this.component(name).assign(e, cmpt)\n  }\n\n  /**\n   * Remove the component named `name` from the entity `e`\n   * \n   * Any destroy logic associated with `name` will be invoked.\n   * \n   * @param e The entity\n   * @param name The name of the component\n   */\n  remove(e: Entity, name: string) {\n    return this.component(name).remove(e)\n  }\n\n  /**\n   * Tests if the entity `e` has the a component named `name`\n   * \n   * @param e The entity\n   * @param name The name of the component\n   */\n  hasComponent(e, name) {\n    return this.component(name).contains(e)\n  }\n\n  /**\n   * Constructs a [[View]] of components.\n   * \n   * Not sure why you would use this over the faster [[CachedView]], might be\n   * obsolete.\n   * \n   * @param components The stores or names of the components\n   */\n  private view(components: (string | ComponentStore)[]) {\n    let stores = []\n    for (let i = 0; i < components.length; i++) {\n      if (typeof components[i] === \"string\")\n        stores.push(this.component(components[i] as string))\n      else stores.push(components[i])\n    }\n    return new View(stores);\n  }\n\n  /**\n   * Constructs a fast view of `components`\n   * \n   * Allows for rapid iteration over entites that have all every component in\n   * `components`.\n   * \n   * @param components The stores or names of the components\n   */\n  private newCachedView(components: (string | ComponentStore)[]) {\n    let stores = []\n    for (let i = 0; i < components.length; i++) {\n      if (typeof components[i] === \"string\")\n        stores.push(this.component(components[i] as string))\n      else stores.push(components[i])\n    }\n\n    return new CachedView(stores);\n  }\n\n  /**\n   * Get a view of every entity that has all `components`\n   * \n   * @todo this could be faster\n   * \n   * @param components The stores or names of the components\n   */\n  query(components: (string | ComponentStore)[]) {\n    return this.newCachedView(components)\n  }\n\n  /**\n   * Crimes are comitted here\n   * \n   * @param func Function to extract component names from\n   */\n  private _getComponentParamNames(func) {\n    const STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n    const ARGUMENT_NAMES = /([^\\s,\\(\\)]+)/g;\n    let argCount = func.length;\n    if(argCount === 0) return []\n    let fnStr = func.toString().replace(STRIP_COMMENTS, '').replace(\"function\", '');\n    let argStr = fnStr.slice(0, fnStr.match(/=>|\\{/).index)\n    let destructuring = argStr.indexOf('[') !== -1\n    var result = argStr.slice(argStr.indexOf('[') + 1, argStr.indexOf(']')).match(ARGUMENT_NAMES);\n    if (result === null)\n    result = [];\n    if(argCount === 2 && !destructuring)\n      result.pop()\n    return result;\n  }\n\n  getCachedView(components) {\n    let componentsString = components.toString();\n    if(!this.viewCache.has(componentsString)) {\n      this.viewCache.set(componentsString, this.newCachedView(components));\n    }\n    return this.viewCache.get(componentsString)\n  }\n\n  addCreateSystem(components, f) {\n    if(components.length === 0) return;\n    let view = components.length === 1 ? this.component(components[0]) : this.getCachedView(components);\n    view.oncreate = f\n  }\n\n  oncreate<T=any>(f: (cmpts: T, e?: Entity) => void) {\n    let components = this._getComponentParamNames(f)\n    this.addCreateSystem(components, f)\n  }\n\n  addDestroySystem(components, f) {\n    if(components.length === 0) return;\n    let view = components.length === 1 ? this.component(components[0]) : this.getCachedView(components);\n    view.ondestroy = f\n  }\n\n  ondestroy<T=any>(f: (cmpts: T, e?: Entity) => void) {\n    let components = this._getComponentParamNames(f)\n    this.addDestroySystem(components, f)\n  }\n\n  addUpdateSystem(components, f) {\n    if(components.length === 0) return;\n    let view = components.length === 1 ? this.component(components[0]) : this.getCachedView(components);\n    this.updateSystems.push(() => view.each(f) )\n  }\n\n  onupdate<T=any>(f: (cmpts: T, e?: Entity) => void) {\n    let components = this._getComponentParamNames(f)\n    this.addUpdateSystem(components, f)\n  }\n  \n  // ******\n  // ** entities\n  // ******\n\n  create(spec) {\n    let newEntity = this.registry.create()\n    for (const prop in spec) {\n      let store = this.component(prop)\n      store.assign(newEntity, spec[prop])\n    }\n    return newEntity;\n  }\n\n  destroy(entity) {\n    for (const name in this.components) {\n      this.components[name].remove(entity);\n    }\n    this.registry.destroy(entity);\n  }\n\n  // ******\n  // ** update\n  // ******\n\n  update() {\n    let length = this.updateSystems.length;\n    for (let i = 0; i < length; i++) {\n      this.updateSystems[i]()\n    }\n  }\n}\n\nexport default new ECS()","import ecs, { ECS } from \"./ecs\"\n\ninterface Position { x : number, y: number }\ninterface Health { value: number }\ninterface Heal { speed: number }\n\n// lose health if you move past x=100\necs.onupdate<[Position, Health]>(([position, health]) => {\n    console.log(\"cached\");\n    \n    if(position.x > 100) health.value -= 1\n})\n\necs.onupdate<[Position]>(position => {\n    console.log(\"not cached\");\n})\n\necs.create({\n    position: { x: 101, y: 20 },\n    health: { value: 100 },\n    heal: { speed: 0.2 }\n})\n\n\n// healers regenerates health\necs.onupdate<[Health, Heal]>(([health, heal]) => {\n    health.value += heal.speed\n})\n\n// healers regenerates health\necs.onupdate<[Health,Heal]>(([health, heal]) => {\n    health.value += heal.speed\n})\n\n// healers slow down\necs.onupdate(heal => heal.speed *= 0.5)\n\necs.onupdate(function(heal) { heal.speed *= 0.5 })\necs.onupdate<[Heal,Position]>(function([heal, position]) { position.x *= 0.5 })\necs.onupdate(function([heal, position], e) { heal.speed *= 0.5 })\nfunction external([heal, position], e) {\n    console.log(\"external\");\n    \n    position.x += heal.speed;\n}\necs.onupdate(external)\n\n\necs.onupdate((heal, e) => { console.log(\"heal\", e); heal.speed *= 0.5 })\n\necs.oncreate<Heal>((heal, e) => { console.log(\"new healer\", heal, e); heal.speed *= 100 })\necs.oncreate(([heal,position], e) => console.log(\"new mobile healer\", heal, position, e))\necs.ondestroy((position, e) => console.log(\"last position\", e, position))\n\nfunction snapshot(ecs:ECS) {\n    for (const e of ecs.registry.entities) {\n        let cmpts = ecs.getComponents(e)\n        console.log(e, cmpts);\n    }\n    console.log(\"====\");\n}\n\nsnapshot(ecs)\n\necs.update()\n\nsnapshot(ecs)\necs.update()\n\n\nsnapshot(ecs)\necs.update()\n\nsnapshot(ecs)\n\necs.destroyAll()\n\n// ecs.systems[0]()"],"names":[],"mappings":"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"}
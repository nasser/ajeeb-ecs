{"version":3,"file":"browser.js","sources":["../ecs.ts","../test.ts"],"sourcesContent":["// TODO creating a cached view when there are already entities in the registry should grab them\n\n/**\n * Entities are implemented as numbers (32 bit integers specifically), but\n * should be treated as opaque identifiers.\n */\nexport type Entity = number\n\nclass ComponentStore {\n  name: string // for debugging\n  entities: Array<Entity>;\n  indices: Array<number>;\n  components: Array<any>;\n  size: number;\n  oncreate?: (Entity, any) => void\n  ondestroy?: (Entity, any) => void\n  private _fakeThis;\n\n  constructor(name: string) {\n    this.entities = []\n    this.indices = []\n    this.components = []\n    this.size = 0;\n    this.name = name;\n    this._fakeThis = {[name]: null}\n  }\n\n  clear() {\n    this.entities.length = 0\n    this.indices.length = 0\n    this.components.length = 0\n    this.size = 0\n  }\n\n  insert(entity: Entity, component: any) {\n    this.entities[this.size] = entity;\n    this.components[this.size] = component;\n    this.indices[entity] = this.size;\n    this.size++;\n    if (this.oncreate) {\n      this._fakeThis[this.name] = component\n      this.oncreate.call(this._fakeThis, entity)\n    }\n  }\n\n  replace(entity: Entity, component: any) {\n    this.components[this.indices[entity]] = component;\n  }\n\n  assign(entity: Entity, component: any) {\n    if (this.contains(entity))\n      this.replace(entity, component);\n    else\n      this.insert(entity, component);\n  }\n\n  remove(entity: Entity) {\n    // TODO this is buggy\n    if (!this.contains(entity))\n      return;\n    if (this.ondestroy) {\n      this._fakeThis[this.name] = this.components[this.indices[entity]]\n      console.log(\"fake this\", this.name, this._fakeThis);\n      \n      this.ondestroy.call(this._fakeThis, entity)\n    }\n    let lastComponent = this.components[this.size - 1];\n    let lastEntity = this.entities[this.size - 1];\n    this.components[this.indices[entity]] = lastComponent;\n    this.entities[this.indices[entity]] = lastEntity;\n    this.indices[lastEntity] = this.indices[entity];\n    this.size--;\n  }\n\n  get(entity: Entity) {\n    if (this.contains(entity))\n      return this.components[this.indices[entity]];\n  }\n\n  getComponents() {\n    return this.components.slice(0, this.size)\n  }\n\n  contains(entity: Entity) {\n    return this.indices[entity] < this.size && this.entities[this.indices[entity]] == entity;\n  }\n\n  eachEntity(f: (e: Entity) => any) {\n    for (var i = this.size - 1; i >= 0; i--) {\n      f(this.entities[i]);\n    }\n  }\n\n  eachComponent(f: (c: any) => any) {\n    for (var i = this.size - 1; i >= 0; i--) {\n      f(this.components[i]);\n    }\n  }\n\n  each(f: (c: any, e: Entity) => any) {\n    for (var i = this.size - 1; i >= 0; i--) {\n      f(this.components[i], this.entities[i]);\n    }\n  }\n}\n\nclass CachedView {\n  private componentStores: ComponentStore[] = [];\n  private packedComponents: ComponentStore = new ComponentStore(\"#packed \");\n\n  injest(componentStore: ComponentStore) {\n    let __this = this;\n    let oldClear = componentStore.clear.bind(componentStore);\n    componentStore.clear = function () {\n      oldClear();\n      __this.packedComponents.clear();\n    }\n\n    let oldRemove = componentStore.remove.bind(componentStore);\n    componentStore.remove = function (entity) {\n      oldRemove(entity);\n      __this.packedComponents.remove(entity);\n    }\n\n    let oldInsert = componentStore.insert.bind(componentStore);\n    componentStore.insert = function (entity, component) {\n      oldInsert(entity, component);\n      // if entity has all the components then add it to packedComponents\n      for (let i = 0; i < __this.componentStores.length; i++) {\n        if (!__this.componentStores[i].contains(entity)) {\n          return;\n        }\n      }\n      // let packed = new Array(__this.componentStores.length);\n      let packed = {}\n      for (let i = 0; i < __this.componentStores.length; i++) {\n        packed[__this.componentStores[i].name] = (__this.componentStores[i].get(entity))\n      }\n      __this.packedComponents.insert(entity, packed);\n    }\n\n    let oldReplace = componentStore.replace.bind(componentStore);\n    componentStore.replace = function (entity, component) {\n      oldReplace(entity, component);\n      // if entity has all the components then replace it in packedComponents\n      for (let i = 0; i < __this.componentStores.length; i++) {\n        if (!__this.componentStores[i].contains(entity)) {\n          return;\n        }\n      }\n      let idx = componentStore.name\n      let packed = __this.packedComponents.get(entity)\n      packed[idx] = component;\n    }\n  }\n\n  constructor(componentStores: ComponentStore[]) {\n    this.componentStores = componentStores;\n    this.packedComponents.name += this.componentStores.map(cs => cs.name).join(\",\")\n    for (let i = 0; i < componentStores.length; i++) {\n      this.injest(componentStores[i])\n    }\n  }\n\n  eachEntity(f) { this.packedComponents.eachEntity(f); }\n  eachComponent(f) { this.packedComponents.eachComponent(f); }\n  each(f) { this.packedComponents.each(f); }\n  count() { return this.packedComponents.size }\n}\n\nclass View {\n  componentStores: Array<ComponentStore>;\n  constructor(componentStores) {\n    this.componentStores = componentStores;\n  }\n  each(f) {\n    if (this.componentStores.length == 0)\n      return;\n    if (this.componentStores.length == 1)\n      return this.componentStores[0].each(f);\n    let smallestSet = this.componentStores[0];\n    for (var i = this.componentStores.length - 1; i >= 0; i--)\n      if (this.componentStores[i].size < smallestSet.size)\n        smallestSet = this.componentStores[i];\n    var componentCount = this.componentStores.length;\n    var args = new Array(componentCount + 1);\n    for (var i = smallestSet.size - 1; i >= 0; i--) {\n      let e = smallestSet.entities[i];\n      args[0] = e;\n      var j = 0;\n      for (; j < componentCount; j++) {\n        if (!this.componentStores[j].contains(e))\n          break;\n        args[j + 1] = this.componentStores[j].get(e);\n      }\n      if (j < componentCount)\n        continue;\n      f.apply(null, args);\n    }\n  }\n}\n\nclass Registry {\n  entities: Array<Entity> = []\n  available: number = 0\n  next: number = 0\n\n  create() {\n    if (this.available > 0) {\n      let entity = this.next\n      this.next = this.entities[entity]\n      this.entities[entity] = entity\n      this.available--\n      return entity\n    } else {\n      let entity = this.entities.length\n      this.entities.push(entity)\n      return entity\n    }\n  }\n\n  destroy(entity: number) {\n    let node = (this.available > 0 ? this.next : -1)\n    this.entities[entity] = node\n    this.next = entity\n    this.available++\n  }\n\n  // TODO might be wrong\n  valid(entity: number) {\n    return entity < this.entities.length && this.entities[entity] === entity\n  }\n\n  get count(): number {\n    return this.entities.length - this.available;\n  }\n}\n\nexport class ECS {\n  registry: Registry = new Registry()\n  components: { [name: string]: ComponentStore } = {}\n  updateSystems: (()=>void)[] = []\n  // createSystems: { [name: string]: (e: Entity, component) => any } = {}\n  // destroySystems: { [name: string]: (e: Entity, component) => any } = {}\n  views = []\n\n  /**\n   * Destroys all entities\n   */\n  destroyAll() {\n    let entitySet = new Set<Entity>()\n    for (const name in this.components) {\n      let c = this.components[name]\n      c.eachEntity(e => entitySet.add(e))\n    }\n\n    entitySet.forEach(e => {\n      this.destroy(e)\n    })\n\n  }\n\n  /**\n   * Returns a [[ComponentStore]] for the component named `name`\n   * \n   * @param name The name of the component\n   */\n  component(name: string) {\n    if (this.components[name] === undefined) {\n      this.components[name] = new ComponentStore(name)\n    }\n    return this.components[name];\n  }\n\n  /**\n   * Returns the value of the component named `name` assigned to entity `e`\n   * @param e The entity\n   * @param name The name of the component\n   */\n  getComponent(e: Entity, name: string) {\n    return this.component(name).get(e)\n  }\n\n  /**\n   * Returns a JavaScript object of every component assigned to entity `e`\n   * \n   * @remarks This is not a fast operation. The object is not stored or used by\n   * the ECS -- it is computed every time this method is called.\n   * \n   * @param e The entity\n   */\n  getComponents(e: Entity) {\n    let val = {}\n    for (const name in this.components) {\n      if (this.components.hasOwnProperty(name)) {\n        const component = this.components[name];\n        if (component.contains(e))\n          val[name] = component.get(e)\n      }\n    }\n    return val\n  }\n\n  /**\n   * Assign the component value `cmpt` to entity `e` with the name `name` \n   * \n   * @todo this should fire create logic\n   * \n   * @param e The entity\n   * @param name The name of the component\n   * @param cmpt The value of the component\n   */\n  assign(e: Entity, name: string, cmpt: any) {\n    return this.component(name).assign(e, cmpt)\n  }\n\n  /**\n   * Remove the component named `name` from the entity `e`\n   * \n   * Any destroy logic associated with `name` will be invoked.\n   * \n   * @param e The entity\n   * @param name The name of the component\n   */\n  remove(e: Entity, name: string) {\n    // if (this.destroySystems[name])\n    //   this.destroySystems[name](e, this.components[name].get(e))\n    return this.component(name).remove(e)\n  }\n\n  /**\n   * Tests if the entity `e` has the a component named `name`\n   * \n   * @param e The entity\n   * @param name The name of the component\n   */\n  hasComponent(e, name) {\n    return this.component(name).contains(e)\n  }\n\n  /**\n   * Constructs a [[View]] of components.\n   * \n   * Not sure why you would use this over the faster [[CachedView]], might be\n   * obsolete.\n   * \n   * @param components The stores or names of the components\n   */\n  private view(components: (string | ComponentStore)[]) {\n    let stores = []\n    for (let i = 0; i < components.length; i++) {\n      if (typeof components[i] === \"string\")\n        stores.push(this.component(components[i] as string))\n      else stores.push(components[i])\n    }\n    return new View(stores);\n  }\n\n  /**\n   * Constructs a fast view of `components`\n   * \n   * Allows for rapid iteration over entites that have all every component in\n   * `components`.\n   * \n   * @param components The stores or names of the components\n   */\n  private cachedView(components: (string | ComponentStore)[]) {\n    let stores = []\n    for (let i = 0; i < components.length; i++) {\n      if (typeof components[i] === \"string\")\n        stores.push(this.component(components[i] as string))\n      else stores.push(components[i])\n    }\n    return new CachedView(stores);\n  }\n\n  /**\n   * Get a view of every entity that has all `components`\n   * \n   * @todo this could be faster\n   * \n   * @param components The stores or names of the components\n   */\n  query(components: (string | ComponentStore)[]) {\n    return this.cachedView(components)\n  }\n\n  private _getParamNames(func) {\n    const STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n    const ARGUMENT_NAMES = /([^\\s,]+)/g;\n    var fnStr = func.toString().replace(STRIP_COMMENTS, '');\n    var result = fnStr.slice(fnStr.indexOf('{') + 1, fnStr.indexOf('}')).match(ARGUMENT_NAMES);\n    if (result === null)\n      result = [];\n    return result;\n  }\n\n  // onCreate(name, f) {\n  //   this.createSystems[name] = f\n  // }\n\n  // onDestroy(name, f) {\n  //   this.destroySystems[name] = f\n  // }\n\n  addUpdateSystem(components, f) {\n    let view = components.length === 1 ? this.components[components[0]] : this.cachedView(components);\n    this.views.push(view)\n    this.updateSystems.push(() => view.each(f))\n  }\n\n  // very sugary\n  onupdate<T>(f: (cmpts: T, e?: Entity) => void) {\n    let components = this._getParamNames(f)\n    this.addUpdateSystem(components, f)\n  }\n  \n  // ******\n  // ** entities\n  // ******\n\n  create(...specs: any[]) {\n    let newEntity = this.registry.create()\n    for (const spec of specs) {\n      if (spec)\n        for (const prop in spec) {\n          console.log(\"create\", spec, spec.ondestroy);\n          let store = this.component(prop)\n          store.oncreate = spec.oncreate\n          store.ondestroy = spec.ondestroy\n          store.assign(newEntity, spec[prop])\n          // if (this.createSystems[prop])\n          //   this.createSystems[prop](newEntity, spec[prop])\n        }\n    }\n    return newEntity;\n  }\n\n  destroy(entity) {\n    for (const name in this.components) {\n      // if (this.destroySystems[name])\n      //   this.destroySystems[name](entity, this.components[name].get(entity))\n      this.components[name].remove(entity);\n    }\n    this.registry.destroy(entity);\n  }\n\n  // ******\n  // ** set up sugar\n  // ******\n  init(fns) {\n    if (typeof fns === \"function\") {\n      return fns(this);\n    } else {\n      for (const k in fns) {\n        this.init(fns[k])\n      }\n    }\n  }\n\n  // ******\n  // ** update\n  // ******\n\n  update() {\n    let length = this.updateSystems.length;\n    for (let i = 0; i < length; i++) {\n      this.updateSystems[i]()\n    }\n  }\n}\n\nexport default new ECS()","import ecs from \"./ecs\"\n\ninterface Position { position : { x : number, y: number } }\ninterface Health { health : { value: number } }\ninterface Heal { heal : { speed: number } }\n\necs.create({\n    position: { x: 10, y: 20 },\n    health: { value: 100 },\n    heal: { speed: 0.2 }\n})\n\n// lose health if you move past x=100\necs.onupdate<Position & Health>(({position, health}) => {\n    if(position.x > 100) health.value -= 1\n})\n\necs.onupdate(({position, health}) => {\n    if(position.x > 100) health.value -= 1\n})\n\n// healers regenerates health\necs.onupdate<Health & Heal>(({health, heal}) => {\n    health.value += heal.speed\n})\n\nconsole.log(ecs.registry.entities);\n\n// ecs.update()\n\n// ecs.systems[0]()\n\n"],"names":[],"mappings":"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"}